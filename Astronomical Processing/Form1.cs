using System;
using System.Linq;
using System.Windows.Forms;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.TextBox;

namespace Astronomical_Processing
{
    // Author: Joseph Jinadu, Strawhats Programmer, Sprint Number 1
    // Date: 16/10/2024
    // Version: 2
    // Astronomical Processing App Design.
    // Brief explanation of the program and list of inputs, processes, outputs

    public partial class Form1 : Form
    {
        #region Global Variables
        // Constant integer to define the size of the array
        const int arraySize = 24;

        // Integer array 'astro' to hold astronomical values, with size defined by 'arraySize'
        int[] astro = new int[arraySize];

        // Instance of Random class to generate random numbers
        Random rand = new Random();

        // Integer to track the current index for operations
        int currentIndex = 0;
        #endregion

        // Constructor for the form
        public Form1()
        {
            // Initialize the form components (auto-generated by Windows Forms)
            InitializeComponent();
        }

        #region Methods 
        // Method to sort the 'astro' array in ascending order using bubble sort
        private void ArraySort()
        {
            // Temporary variable to hold values for swapping
            int temp;

            // Outer loop to go through each element except the last one
            for (int i = 0; i < arraySize - 1; i++)
            {
                // Inner loop to compare adjacent elements in the array
                for (int j = 0; j < arraySize - 1; j++)
                {
                    // Check if current element is greater than the next element
                    if (astro[j] > astro[j + 1])
                    {
                        // Swap elements if current is greater than next
                        temp = astro[j];
                        astro[j] = astro[j + 1];
                        astro[j + 1] = temp;
                    }
                }
            }
        }

        // Method to display the sorted array in a ListBox
        private void DisplayArray()
        {
            // Clear the ListBox items before adding new elements
            lstBox.Items.Clear();

            // Loop through each element in the 'astro' array
            for (int i = 0; i < arraySize; i++)
            {
                // Check if ListBox contains 0, remove it if true
                if (lstBox.Items.Contains(0))
                {
                    lstBox.Items.Remove(0);
                }
                // Add the current element in the 'astro' array to the ListBox
                lstBox.Items.Add(astro[i]);
            }
        }

        // Method to check if the array is sorted and prompt user to sort if not
        private void CheckSort()
        {
            // Check if the TextBox is empty
            if (string.IsNullOrEmpty(txtBox.Text))
            {
                // Show error message if TextBox is empty
                MessageBox.Show("Pick a Number", "Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                // Clear any selected item in the ListBox
                lstBox.ClearSelected();
            }
            else
            {
                // Ask user if the array is sorted
                DialogResult dialogResult = MessageBox.Show("Have you sorted the Array", "Index", MessageBoxButtons.YesNo);

                // If user clicks 'Yes', perform binary search
                if (dialogResult == DialogResult.Yes)
                {
                    BinarySearch();
                    // Clear the TextBox
                    txtBox.Clear();
                    // Clear any selected item in the ListBox
                    lstBox.ClearSelected();
                }
                // If user clicks 'No', sort and display the array
                else if (dialogResult == DialogResult.No)
                {
                    MessageBox.Show("Sorting Array");
                    // Sort the array
                    ArraySort();
                    // Display the sorted array
                    DisplayArray();
                }
            }
        }

        // Method to perform a binary search on the sorted array
        private void BinarySearch()
        {
            // Midpoint of the array
            int mid;
            // Lower bound of the search
            int low = 0;
            // Upper bound of the search
            int high = arraySize;
            // Parse target value from the TextBox
            int target = int.Parse(txtBox.Text);
            // Variable to hold the index of found item
            int index;
            // Boolean to check if the target is found
            bool found = false;

            try
            {
                // Loop until target is found or search bounds are invalid
                while (!found && low <= high)
                {
                    // Calculate the midpoint
                    mid = (low + high) / 2;

                    // Check if target is found at midpoint
                    if (astro[mid] == target)
                    {
                        // Set found to true, assign index to midpoint
                        found = true;
                        index = mid;
                        // Select item at found index in ListBox
                        lstBox.SetSelected(index, true);
                        // Increment index for display purposes
                        index++;
                        // Show message with the found index
                        MessageBox.Show("Value found at: " + index, "Index", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    // If midpoint value is greater than target, adjust upper bound
                    else if (astro[mid] > target)
                    {
                        high = mid - 1;
                    }
                    // If midpoint value is less than target, adjust lower bound
                    else
                    {
                        low = mid + 1;
                    }
                }

                // If target is not in the array, show 'Not Found' message
                if (!astro.Contains(int.Parse(txtBox.Text)))
                {
                    MessageBox.Show("Not Found", "Index", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            // Catch any exceptions and show an error message
            catch (Exception)
            {
                MessageBox.Show("Error");
            }
        }

        // Method to generate random numbers and populate the 'astro' array
        private void RandomNumGene()
        {
            // Clear the ListBox items
            lstBox.Items.Clear();

            // Loop through each element in the 'astro' array
            for (int i = 0; i < arraySize; i++)
            {
                // Assign a random number between 10 and 99 to the current element
                astro[i] = rand.Next(10, 99);
            }
        }
        #endregion

        // Event handler for the Sort button click
        private void BtnSort_Click(object sender, EventArgs e)
        {
            // Call the ArraySort method to sort the array
            ArraySort();
            // Call the DisplayArray method to display sorted array in ListBox
            DisplayArray();
        }
        #region Buttons
        // Event handler for the Edit button click
        private void BtnEdit_Click(object sender, EventArgs e)
        {
            // Check if the TextBox is empty
            if (string.IsNullOrEmpty(txtBox.Text))
            {
                // Show error message if TextBox is empty
                MessageBox.Show("No Data in Text Box", "Empty Text Box", MessageBoxButtons.OK, MessageBoxIcon.Error);
                // Clear any selected item in the ListBox
                lstBox.ClearSelected();
            }
            // Check if no item is selected in ListBox
            else if (lstBox.SelectedIndex == -1)
            {
                // Show error message if no item is selected
                MessageBox.Show("Select a Number", "Select Number", MessageBoxButtons.OK, MessageBoxIcon.Error);
                // Clear any selected item in the ListBox
                lstBox.ClearSelected();
            }
            else
            {
                // Update the selected item in 'astro' array with TextBox value
                astro[lstBox.SelectedIndex] = int.Parse(txtBox.Text);
                // Sort the array after update
                ArraySort();
                // Display the sorted array in ListBox
                DisplayArray();
                // Clear the TextBox
                txtBox.Clear();
                // Clear any selected item in the ListBox
                lstBox.ClearSelected();
            }
        }

        // Event handler for the Generate button click
        private void BtnGenerate_Click(object sender, EventArgs e)
        {
            // Call the RandomNumGene method to generate random numbers
            RandomNumGene();
            // Display the generated array in ListBox
            DisplayArray();
        }

        // Event handler for the Search button click
        private void BtnSearch_Click(object sender, EventArgs e)
        {
            // Call the CheckSort method to check if array is sorted and perform search
            CheckSort();
        }

        // Event handler for the ListBox selected index change

        #endregion

        #region Listbox
        private void lstBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            // No specific action defined for this event
        }

        // Event handler for the ListBox mouse down event
        private void lstBox_MouseDown(object sender, MouseEventArgs e)
        {
            // Display the selected item from ListBox in the TextBox
            txtBox.Text = astro[lstBox.SelectedIndex].ToString();
        }
    }
    #endregion


}
